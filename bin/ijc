#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , program = require('commander')
  , path = require('path')
  , basename = path.basename
  , dirname = path.dirname
  , resolve = path.resolve
  , exists = fs.existsSync || path.existsSync
  , join = path.join
  , mkdirp = require('mkdirp')
  , jade = require('../');

// jade options

var options = {};

// options

program
  .version(jade.version)
  .usage('[options] [dir|file ...]')
  .option('-o, --obj <str>', 'javascript options object')
  .option('-O, --out <dir>', 'output the compiled html to <dir>')
  .option('-p, --path <path>', 'filename used to resolve includes')
  .option('-R, --rawdom', 'Compile in rawDOM syntax mode')
  .option('-s, --stdout', 'Print output to stdout')
  .option('-P, --pretty', 'compile pretty html output')
  .option('-x, --xml', 'Output well-formed xml.')
  .option('-w, --watch', 'watch files for changes and automatically re-render')

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # translate jade the templates dir');
  console.log('    $ jade templates');
  console.log('');
  console.log('    # create {foo,bar}.html');
  console.log('    $ jade {foo,bar}.jade');
  console.log('');
  console.log('    # jade over stdio');
  console.log('    $ jade < my.jade > my.html');
  console.log('');
  console.log('    # jade over stdio');
  console.log('    $ echo "h1 Jade!" | jade');
  console.log('');
  console.log('    # foo, bar dirs rendering to /tmp');
  console.log('    $ jade foo bar --out /tmp ');
  console.log('');
});

program.parse(process.argv);

// options given, parse them

if (program.obj) {
  if (exists(program.obj)) {
    options = JSON.parse(fs.readFileSync(program.obj));
  } else {
    options = eval('(' + program.obj + ')');
  }
}

// --filename

if (program.path) options.filename = program.path;

// --no-debug

options.compileDebug = program.debug;

// --client

options.client = program.client;

// --pretty

options.pretty = program.pretty;

// --xml

options.xml = program.xml;

// --watch

options.watch = program.watch;

// left-over args are file paths

var files = program.args;

// compile files

if (files.length) {
  console.log();
  files.forEach(renderFile);
  if (options.watch) {
    files.forEach(function (file) {
      fs.watchFile(file, {interval: 100}, function (curr, prev) {
        if (curr.mtime > prev.mtime) renderFile(file);
      });
    });
  }
  process.on('exit', function () {
    console.log();
  });
// stdio
} else {
  stdin();
}

/**
 * Compile from stdin.
 */

function stdin() {
  var buf = '';
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk){ buf += chunk; });
  process.stdin.on('end', function(){
    var output = getOutput(buf, options)
    process.stdout.write(output);
  }).resume();
}

function three_digits(n) {
  if (n < 10) return "00" + n;
  if (n < 100) return "0" + n;
  return "" + n;
}

function lineify(str, prefix) {
  var n = 0;
  prefix = prefix || '';
  if (!(typeof str == 'string')) return str
  return str.replace(/^/mg, function () { return prefix + three_digits(++n) + "  "});
}

var heredoc_regexp = new RegExp('^[ \\t]*(?=\\S)', 'gm')

strip_heredoc = function(str) {
  var indent = 999999;
  var ref = str.match(heredoc_regexp);
  for (var i = 0, len = ref.length; i < len; i++) {
    if (ref[i].length < indent) {
      indent = ref[i].length;
    }
  }
  regex = new RegExp('^[ \t]{' + indent + '}', 'gm');
  return str.replace(regex, '');
};

var first_line_regexp = new RegExp('(.*)'); // No /m flag.
function injectCommentedTemplate(output, template_text) {
  injected_template_text = "  # !ijc\n" + template_text.replace(/^/gm, '  # ');
  return output.replace(first_line_regexp, '$1\n' + injected_template_text);
}

function getOutput(str, options) {
  var options_ijc = {
    locals: {},
    client: true,
    inline: true,
    coffee: true,
    rawdom: program.rawdom,
    compileDebug: false,
    filepath: program.path ? program.path : "(stdin)"
  };

  regex_str = ""
  regex_str += '([ \\t]*)'                // capture leading indent ($1)
  regex_str += '([^\\n]*)'                // capture existing line, eg "template = " ($2)
  regex_str += '"""'                      // opening """ token
  regex_str += '\\s*'                     // consume any spacing
  regex_str += '[!](jade|jc|ijc)\\b[:]?'  // Magic Token, eg '!ijc' ($3)
  regex_str += '[ \\t]*[\\n]?'            // consume any spacing, newline
  regex_str += '([\\s\\S]*?)'             // capture template contents ($4)
  regex_str += '"""'                      // closing """ token
  regex = RegExp(regex_str, 'gm');

  return str.replace(RegExp(regex_str),
      function (match, indent, before_text, template_type, template_text) {
    if (template_type == "ijc") {
      output = before_text
      template_text_stripped = strip_heredoc(template_text)
      ijc = jade.compile(template_text_stripped, options_ijc)
      output += injectCommentedTemplate(ijc, template_text_stripped);
      output += ".call(@)"
      output = output.replace(/^/gm, indent)
      return output;
    }
    return match;
  });
}

/**
 * Process the given path, compiling the jade files found.
 * Always walk the subdirectories.
 */

function renderFile(path) {
  var re = /\.ijc$/;
  fs.lstat(path, function(err, stat) {
    if (err) throw err;
    // Found jade file
    if (stat.isFile() && re.test(path)) {
      fs.readFile(path, 'utf8', function(err, str) {
        if (err) throw err;
        options.filename = path;
        var output = getOutput(str, options);

        if (program.stdout) {
          console.log(output);
        } else {
          var extname = '';
          path = path.replace(re, extname);
          if (program.out) path = join(program.out, basename(path));
          var dir = resolve(dirname(path));
          mkdirp(dir, 0755, function(err){
            if (err) throw err;
            fs.writeFile(path, output, function(err){
              if (err) throw err;
              console.log('  \033[90mrendered \033[36m%s\033[0m', path);
            });
          });
        }
      });
    // Found directory
    } else if (stat.isDirectory()) {
      fs.readdir(path, function(err, files) {
        if (err) throw err;
        files.map(function(filename) {
          return path + '/' + filename;
        }).forEach(renderFile);
      });
    }
  });
}
